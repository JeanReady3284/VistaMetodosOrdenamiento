package application;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;

import java.net.URL;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import fes.aragon.utilerias.dinamicas.listasimple.ListaSimple;
import javafx.application.Platform;
import javafx.event.ActionEvent;

import javafx.scene.chart.BarChart;
import javafx.scene.chart.XYChart;

public class VistaMetodosDeOrdenamientoController implements Initializable {
	@FXML
	private BarChart<String, Number> areaBurbuja;
	@FXML
	private BarChart<String, Number> areaSeleccion;
	@FXML
	private BarChart<String, Number> areaInsercion;
	@FXML
	private BarChart<String, Number> areaSacudida;
	@FXML
	private BarChart<String, Number> areaQuickSortR;
	@FXML
	private BarChart<String, Number> areaQuickSortI;
	@FXML
	private Button btnIniciar;
	@FXML
	private Button btnAleatorios;
	@FXML
	private Button btnSalir;

	AtributosOrdenamiento burbuja = new AtributosOrdenamiento();
	AtributosOrdenamiento seleccion = new AtributosOrdenamiento();
	AtributosOrdenamiento insercion = new AtributosOrdenamiento();
	AtributosOrdenamiento sacudida = new AtributosOrdenamiento();
	AtributosOrdenamiento quickR = new AtributosOrdenamiento();
	AtributosOrdenamiento quickI = new AtributosOrdenamiento();

	// Event Listener on Button[#btnIniciar].onAction
	@FXML
	public void evento(ActionEvent event) {
		// TODO Autogenerated
		burbuja.setScheduledExecutorService(Executors.newSingleThreadScheduledExecutor());
		burbuja.getScheduledExecutorService().scheduleAtFixedRate(() -> {
			Platform.runLater(() -> {

					MetodosOrdenamiento.metodoBurbuja(burbuja);
			});
		}, 0, 1, TimeUnit.SECONDS);

		seleccion.setScheduledExecutorService(Executors.newSingleThreadScheduledExecutor());
		seleccion.getScheduledExecutorService().scheduleAtFixedRate(() -> {
			Platform.runLater(() -> {

					MetodosOrdenamiento.metodoSeleccion(seleccion);
			});
		}, 0, 1, TimeUnit.SECONDS);

		insercion.setScheduledExecutorService(Executors.newSingleThreadScheduledExecutor());
		insercion.getScheduledExecutorService().scheduleAtFixedRate(() -> {
			Platform.runLater(() -> {

					MetodosOrdenamiento.metodoInsercion(insercion);
			});
		}, 0, 1, TimeUnit.SECONDS);
		sacudida.setScheduledExecutorService(Executors.newSingleThreadScheduledExecutor());
		sacudida.getScheduledExecutorService().scheduleAtFixedRate(() -> {
			Platform.runLater(() -> {

					MetodosOrdenamiento.metodoSacudida(sacudida);
			});
		}, 0, 50, TimeUnit.MILLISECONDS);

		quickR.setScheduledExecutorService(Executors.newSingleThreadScheduledExecutor());
		quickR.getScheduledExecutorService().scheduleAtFixedRate(() -> {
			Platform.runLater(() -> {

				MetodosOrdenamiento.reduceRecursivo(0, quickR.getLista().getLongitud() - 1, quickR.getLista(),quickR);
				
			});
		}, 0, 1, TimeUnit.SECONDS);
		quickI.setScheduledExecutorService(Executors.newSingleThreadScheduledExecutor());
		quickI.getScheduledExecutorService().scheduleAtFixedRate(() -> {
			Platform.runLater(() -> {

					MetodosOrdenamiento.metodoQuickIterativo(quickI);
			});
		}, 0, 1, TimeUnit.SECONDS);

	}

	// Event Listener on Button[#btnAleatorios].onAction
	@FXML
	public void eventoAleatorios(ActionEvent event) {
		// TODO Autogenerated
		numerosAleatorios();
		burbuja.getSeries().getData().clear();
		seleccion.getSeries().getData().clear();
		insercion.getSeries().getData().clear();
		sacudida.getSeries().getData().clear();
		quickR.getSeries().getData().clear();
		quickI.getSeries().getData().clear();

		for (int i = 0; i < burbuja.getLista().getLongitud(); i++) {
			burbuja.getSeries().getData().add(new XYChart.Data<>(String.valueOf(i), burbuja.getLista().obtenerNodo(i)));
			burbuja.getSeries().getData().get(i).getNode().setStyle(burbuja.devuelveColorA());
			if (burbuja.getScheduledExecutorService() != null) {
				burbuja.getScheduledExecutorService().shutdown();
			}
		}
		for (int i = 0; i < seleccion.getLista().getLongitud(); i++) {
			seleccion.getSeries().getData()
					.add(new XYChart.Data<>(String.valueOf(i), seleccion.getLista().obtenerNodo(i)));
			seleccion.getSeries().getData().get(i).getNode().setStyle(seleccion.devuelveColorA());
			if (seleccion.getScheduledExecutorService() != null) {
				seleccion.getScheduledExecutorService().shutdown();
			}
		}
		for (int i = 0; i < insercion.getLista().getLongitud(); i++) {
			insercion.getSeries().getData()
					.add(new XYChart.Data<>(String.valueOf(i), insercion.getLista().obtenerNodo(i)));
			insercion.getSeries().getData().get(i).getNode().setStyle(insercion.devuelveColorA());
			if (insercion.getScheduledExecutorService() != null) {
				insercion.getScheduledExecutorService().shutdown();
			}
		}
		for (int i = 0; i < sacudida.getLista().getLongitud(); i++) {
			sacudida.getSeries().getData()
					.add(new XYChart.Data<>(String.valueOf(i), sacudida.getLista().obtenerNodo(i)));
			sacudida.getSeries().getData().get(i).getNode().setStyle(sacudida.devuelveColorA());
			if (sacudida.getScheduledExecutorService() != null) {
				sacudida.getScheduledExecutorService().shutdown();
			}
		}
		for (int i = 0; i < quickR.getLista().getLongitud(); i++) {
			quickR.getSeries().getData().add(new XYChart.Data<>(String.valueOf(i), quickR.getLista().obtenerNodo(i)));
			quickR.getSeries().getData().get(i).getNode().setStyle(quickR.devuelveColorA());
			if (quickR.getScheduledExecutorService() != null) {
				quickR.getScheduledExecutorService().shutdown();
			}
		}

		for (int i = 0; i < quickI.getLista().getLongitud(); i++) {
			quickI.getSeries().getData().add(new XYChart.Data<>(String.valueOf(i), quickI.getLista().obtenerNodo(i)));
			quickI.getSeries().getData().get(i).getNode().setStyle(quickI.devuelveColorA());
			if (quickI.getScheduledExecutorService() != null) {
				quickI.getScheduledExecutorService().shutdown();
			}
		}

	}

	// Event Listener on Button[#btnSalir].onAction
	@FXML
	public void eventoSalir(ActionEvent event) {
		// TODO Autogenerated
		if (burbuja.getScheduledExecutorService() != null && seleccion.getScheduledExecutorService() != null
				&& insercion.getScheduledExecutorService() != null && sacudida.getScheduledExecutorService() != null
				&& quickR.getScheduledExecutorService() != null && quickI.getScheduledExecutorService() != null) {

			burbuja.getScheduledExecutorService().shutdown();
			seleccion.getScheduledExecutorService().shutdown();
			insercion.getScheduledExecutorService().shutdown();
			sacudida.getScheduledExecutorService().shutdown();
			quickR.getScheduledExecutorService().shutdown();
			quickI.getScheduledExecutorService().shutdown();
		}
		Platform.exit();
	}

	public void numerosAleatorios() {
		burbuja.setLista(new ListaSimple<>());
		seleccion.setLista(new ListaSimple<>());
		insercion.setLista(new ListaSimple<>());
		sacudida.setLista(new ListaSimple<>());
		quickR.setLista(new ListaSimple<>());
		quickI.setLista(new ListaSimple<>());
	
		Random rd = new Random();
		for (int i = 0; i < 90; i++) {
			burbuja.getLista().agregarEnCola(rd.nextInt(200));
			seleccion.getLista().agregarEnCola(burbuja.getLista().obtenerNodo(i));
			insercion.getLista().agregarEnCola(burbuja.getLista().obtenerNodo(i));
			sacudida.getLista().agregarEnCola(burbuja.getLista().obtenerNodo(i));
			quickR.getLista().agregarEnCola(burbuja.getLista().obtenerNodo(i));
			quickI.getLista().agregarEnCola(burbuja.getLista().obtenerNodo(i));
		}
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		numerosAleatorios();

		burbuja.getxAxis().setLabel("Time/s");
		burbuja.getxAxis().setAnimated(false);
		burbuja.getyAxis().setLabel("Value");
		burbuja.getyAxis().setAnimated(false);
		areaBurbuja.setTitle("Metodo Burbuja");
		areaBurbuja.setAnimated(false);
		burbuja.setSeries(new XYChart.Series<>());
		burbuja.getSeries().setName("Conjunto de datos");
		areaBurbuja.getData().add(burbuja.getSeries());
		for (int i = 0; i < burbuja.getLista().getLongitud(); i++) {
			final XYChart.Data<String, Number> dato = new XYChart.Data<>(String.valueOf(i),
					burbuja.getLista().obtenerNodo(i));
			burbuja.getSeries().getData().add(dato);
			dato.getNode().setStyle(burbuja.devuelveColorA());
		}

		seleccion.getxAxis().setLabel("Time/s");
		seleccion.getxAxis().setAnimated(false);
		seleccion.getyAxis().setLabel("Value");
		seleccion.getyAxis().setAnimated(false);
		areaSeleccion.setTitle("Metodo Seleccion");
		areaSeleccion.setAnimated(false);
		seleccion.setSeries(new XYChart.Series<>());
		seleccion.getSeries().setName("Conjunto de datos");
		areaSeleccion.getData().add(seleccion.getSeries());
		for (int i = 0; i < seleccion.getLista().getLongitud(); i++) {
			final XYChart.Data<String, Number> dato = new XYChart.Data<>(String.valueOf(i),
					seleccion.getLista().obtenerNodo(i));
			seleccion.getSeries().getData().add(dato);
			dato.getNode().setStyle(seleccion.devuelveColorA());
		}
		insercion.getxAxis().setLabel("Time/s");
		insercion.getxAxis().setAnimated(false);
		insercion.getyAxis().setLabel("Value");
		insercion.getyAxis().setAnimated(false);
		areaInsercion.setTitle("Metodo Insercion");
		areaInsercion.setAnimated(false);
		insercion.setSeries(new XYChart.Series<>());
		insercion.getSeries().setName("Conjunto de datos");
		areaInsercion.getData().add(insercion.getSeries());
		for (int i = 0; i < insercion.getLista().getLongitud(); i++) {
			final XYChart.Data<String, Number> dato = new XYChart.Data<>(String.valueOf(i),
					insercion.getLista().obtenerNodo(i));
			insercion.getSeries().getData().add(dato);
			dato.getNode().setStyle(insercion.devuelveColorA());
		}

		sacudida.getxAxis().setLabel("Time/s");
		sacudida.getxAxis().setAnimated(false);
		sacudida.getyAxis().setLabel("Value");
		sacudida.getyAxis().setAnimated(false);
		areaSacudida.setTitle("Metodo Sacudida");
		areaSacudida.setAnimated(false);
		sacudida.setSeries(new XYChart.Series<>());
		sacudida.getSeries().setName("Conjunto de datos");
		areaSacudida.getData().add(sacudida.getSeries());
		for (int i = 0; i < sacudida.getLista().getLongitud(); i++) {
			final XYChart.Data<String, Number> dato = new XYChart.Data<>(String.valueOf(i),
					sacudida.getLista().obtenerNodo(i));
			sacudida.getSeries().getData().add(dato);
			dato.getNode().setStyle(sacudida.devuelveColorA());
		}

		quickR.getxAxis().setLabel("Time/s");
		quickR.getxAxis().setAnimated(false);
		quickR.getyAxis().setLabel("Value");
		quickR.getyAxis().setAnimated(false);
		areaQuickSortR.setTitle("Metodo Quick Sort Recursivo");
		areaQuickSortR.setAnimated(false);
		quickR.setSeries(new XYChart.Series<>());
		quickR.getSeries().setName("Conjunto de datos");
		areaQuickSortR.getData().add(quickR.getSeries());
		for (int i = 0; i < quickR.getLista().getLongitud(); i++) {
			final XYChart.Data<String, Number> dato = new XYChart.Data<>(String.valueOf(i),
					quickR.getLista().obtenerNodo(i));
			quickR.getSeries().getData().add(dato);
			dato.getNode().setStyle(quickR.devuelveColorA());
		}

		quickI.getxAxis().setLabel("Time/s");
		quickI.getxAxis().setAnimated(false);
		quickI.getyAxis().setLabel("Value");
		quickI.getyAxis().setAnimated(false);
		areaQuickSortI.setTitle("Metodo Quick Sort Iterativo");
		areaQuickSortI.setAnimated(false);
		quickI.setSeries(new XYChart.Series<>());
		quickI.getSeries().setName("Conjunto de datos");
		areaQuickSortI.getData().add(quickI.getSeries());

		for (int i = 0; i < quickI.getLista().getLongitud(); i++) {
			final XYChart.Data<String, Number> dato = new XYChart.Data<>(String.valueOf(i),
					quickI.getLista().obtenerNodo(i));
			quickI.getSeries().getData().add(dato);
			dato.getNode().setStyle(quickI.devuelveColorA());
		}

	}

}
